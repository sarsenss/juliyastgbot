import os
import asyncio
import aiomysql
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

BOT_TOKEN = os.getenv("6382553225:AAEnjV2KPiPaCR-7aLSPf40kKSk720IvFB0")

DB_CONFIG = {
    "host": os.getenv("MYSQLHOST"),
    "port": int(os.getenv("MYSQLPORT", 3306)),
    "user": os.getenv("MYSQLUSER"),
    "password": os.getenv("MYSQLPASSWORD"),
    "db": os.getenv("MYSQLDATABASE"),
}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Asia/Almaty")  # —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–ø–∞—Å–∏–±–æ, –®–µ—Ä. –Ø –≤—ã–ø–∏–ª–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ. ü•∞", callback_data="confirm_taken")]
    ])

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def get_conn():
    return await aiomysql.connect(**DB_CONFIG)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
async def init_db():
    conn = await get_conn()
    async with conn.cursor() as cur:
        await cur.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id BIGINT,
            time VARCHAR(10),
            confirmed BOOLEAN DEFAULT FALSE
        )
        """)
    await conn.commit()
    conn.close()

# /start
@dp.message(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–£–ª–∂–∞–∫–∞, –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ üíä\n\n"
                         "–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `HH:MM` (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00), "
                         "–∏ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
@dp.message(F.text.regexp(r"^\d{2}:\d{2}$"))
async def add_time(message: types.Message):
    time_str = message.text.strip()
    conn = await get_conn()
    async with conn.cursor() as cur:
        await cur.execute("INSERT INTO reminders (user_id, time) VALUES (%s, %s)", (message.from_user.id, time_str))
    await conn.commit()
    conn.close()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    hour, minute = map(int, time_str.split(":"))
    scheduler.add_job(send_reminder, CronTrigger(hour=hour, minute=minute), args=[message.from_user.id, 1])

    await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(user_id: int, attempt: int = 1):
    try:
        await bot.send_message(user_id, f"üíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{attempt}: –ø–æ—Ä–∞ –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!",
                               reply_markup=confirm_keyboard())

        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
        if attempt < 5:
            run_time = datetime.now() + timedelta(minutes=30)
            scheduler.add_job(send_reminder, "date", run_date=run_time, args=[user_id, attempt + 1])

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query(F.data == "confirm_taken")
async def confirm_taken(callback: types.CallbackQuery):
    conn = await get_conn()
    async with conn.cursor() as cur:
        await cur.execute("UPDATE reminders SET confirmed = TRUE WHERE user_id = %s", (callback.from_user.id,))
    await conn.commit()
    conn.close()

    await callback.message.edit_text("‚úÖ –£–º–Ω–∏—á–∫–∞! –¢—ã –≤—ã–ø–∏–ª –ª–µ–∫–∞—Ä—Å—Ç–≤–æ. –¢–≤–æ—è –∫–æ–∂–∞ —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ. –ü–æ—Ç–µ—Ä–ø–∏, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ.")

    # –£–¥–∞–ª—è–µ–º –±—É–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    jobs = scheduler.get_jobs()
    for job in jobs:
        if job.args and job.args[0] == callback.from_user.id:
            job.remove()

async def main():
    await init_db()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
